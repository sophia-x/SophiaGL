#version 330 core

layout(location = 0) in vec3 vertex_position_modelspace;
layout(location = 1) in vec2 vertex_UV;
layout(location = 2) in vec3 vertex_normal_modelspace;
layout(location = 3) in vec3 vertex_tangent_modelspace;
layout(location = 4) in vec3 vertex_bitangent_modelspace;

out vec2 UV;
out vec3 position_worldspace;
out vec3 light_direction_tangentspace;
out vec3 eye_direction_tangentspace;

uniform mat4 MVP;
uniform mat4 V;
uniform mat4 M;
uniform mat3 MV3x3;
uniform vec3 light_position_worldspace;

void main(){
	gl_Position =  MVP * vec4(vertex_position_modelspace,1);
	
	position_worldspace = (M * vec4(vertex_position_modelspace,1)).xyz;
	
	vec3 vertexPosition_cameraspace = ( V * M * vec4(vertex_position_modelspace,1)).xyz;
	vec3 eye_direction_cameraspace = vec3(0,0,0) - vertexPosition_cameraspace;

	vec3 light_position_cameraspace = ( V * vec4(light_position_worldspace,1)).xyz;
	vec3 light_direction_cameraspace = light_position_cameraspace + eye_direction_cameraspace;
	
	UV = vertex_UV;
	
	vec3 vertex_tangent_cameraspace = MV3x3 * vertex_tangent_modelspace;
	vec3 vertex_bitangent_cameraspace = MV3x3 * vertex_bitangent_modelspace;
	vec3 vertex_normal_cameraspace = MV3x3 * vertex_normal_modelspace;
	
	mat3 TBN = transpose(mat3(
		vertex_tangent_cameraspace,
		vertex_bitangent_cameraspace,
		vertex_normal_cameraspace	
	));

	light_direction_tangentspace = TBN * light_direction_cameraspace;
	eye_direction_tangentspace =  TBN * eye_direction_cameraspace;
}