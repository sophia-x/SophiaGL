#version 330 core

in vec2 UV;
in vec3 position_worldspace;
in vec3 light_direction_tangentspace;
in vec3 eye_direction_tangentspace;

layout(location = 0) out vec3 color;

uniform sampler2D diffuse_texture;
uniform sampler2D normal_texture;
uniform sampler2D specular_texture;
uniform mat4 V;
uniform mat4 M;
uniform mat3 MV3x3;
uniform vec3 light_position_worldspace;
uniform vec3 light_color;
uniform float light_power;
uniform vec3 material_ambient_color_ratio;
uniform vec3 material_specular_color;
uniform float material_specular_ratio;

void main(){
	// Material properties
	vec3 material_diffuse_color = texture( diffuse_texture, UV ).rgb;
	vec3 material_ambient_color = material_ambient_color_ratio * material_diffuse_color;
	vec3 material_specular_color = texture( specular_texture, UV ).rgb * material_specular_color;

	vec3 texture_normal_tangentspace = normalize(texture( normal_texture, vec2(UV.x,-UV.y) ).rgb*2.0 - 1.0);
	
	float distance = length( light_position_worldspace - position_worldspace );

	// Normal of the computed fragment, in camera space
	vec3 n = texture_normal_tangentspace;
	// Direction of the light (from the fragment to the light)
	vec3 l = normalize(light_direction_tangentspace);
	// Cosine of the angle between the normal and the light direction, 
	// clamped above 0
	//  - light is at the vertical of the triangle -> 1
	//  - light is perpendicular to the triangle -> 0
	//  - light is behind the triangle -> 0
	float cos_theta = clamp( dot( n,l ), 0,1 );

	// Eye vector (towards the camera)
	vec3 E = normalize(eye_direction_tangentspace);
	// Direction in which the triangle reflects the light
	vec3 R = reflect(-l,n);
	// Cosine of the angle between the Eye vector and the Reflect vector,
	// clamped to 0
	//  - Looking into the reflection -> 1
	//  - Looking elsewhere -> < 1
	float cos_alpha = clamp( dot( E,R ), 0,1 );
	
	color = 
		// Ambient : simulates indirect lighting
	 material_ambient_color +
		// Diffuse : "color" of the object
		material_diffuse_color * light_color * light_power * cos_theta / (distance*distance) +
		// Specular : reflective highlight, like a mirror
	 material_specular_color * light_color * light_power * pow(cos_alpha, material_specular_ratio) / (distance*distance);
	
	// color = normalize(light_direction_tangentspace);
	// color = normalize(eye_direction_tangentspace);
}