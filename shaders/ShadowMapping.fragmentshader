#version 330 core

in vec2 UV;
in vec3 normal_cameraspace;
in vec3 eye_direction_cameraspace;
in vec3 light_direction_cameraspace;
in vec4 shadow_coord;

layout(location = 0) out vec3 color;

uniform sampler2D texture_in;
uniform vec3 light_color;
uniform float light_power;
uniform vec3 material_ambient_color_ratio;
uniform vec3 material_specular_color;
uniform float material_specular_ratio;
uniform float bias_ratio;//0.005
uniform sampler2DShadow shadowMap;

vec2 poisson_disk[16] = vec2[]( 
   vec2( -0.94201624, -0.39906216 ), 
   vec2( 0.94558609, -0.76890725 ), 
   vec2( -0.094184101, -0.92938870 ), 
   vec2( 0.34495938, 0.29387760 ), 
   vec2( -0.91588581, 0.45771432 ), 
   vec2( -0.81544232, -0.87912464 ), 
   vec2( -0.38277543, 0.27676845 ), 
   vec2( 0.97484398, 0.75648379 ), 
   vec2( 0.44323325, -0.97511554 ), 
   vec2( 0.53742981, -0.47373420 ), 
   vec2( -0.26496911, -0.41893023 ), 
   vec2( 0.79197514, 0.19090188 ), 
   vec2( -0.24188840, 0.99706507 ), 
   vec2( -0.81409955, 0.91437590 ), 
   vec2( 0.19984126, 0.78641367 ), 
   vec2( 0.14383161, -0.14100790 ) 
);

// Returns a random number based on a vec3 and an int.
float random(vec3 seed, int i){
	vec4 seed4 = vec4(seed,i);
	float dot_product = dot(seed4, vec4(12.9898,78.233,45.164,94.673));
	return fract(sin(dot_product) * 43758.5453);
}

void main(){
	// Material properties
	vec3 material_diffuse_color = texture( texture_in, UV ).rgb;
	vec3 material_ambient_color = material_ambient_color_ratio * material_diffuse_color;

	vec3 n = normalize( normal_cameraspace );
	vec3 l = normalize( light_direction_cameraspace );
	float cos_theta = clamp( dot( n,l ), 0,1 );
	
	vec3 E = normalize(eye_direction_cameraspace);
	vec3 R = reflect(-l,n);
	float cos_alpha = clamp( dot( E,R ), 0,1 );
	
	float bias = bias_ratio*tan(acos(cos_theta));
	bias = clamp(bias, 0,0.01);

	// Sample the shadow map 4 times
	float visibility=1.0;
	for (int i=0;i<36;i++){
		// int index = i;
		int index = int(16.0*random(gl_FragCoord.xyy, i))%16;
		// int index = int(16.0*random(floor(position_worldspace.xyz*1000.0), i))%16;
		visibility -= 0.2*(1.0-texture( shadowMap, vec3(shadow_coord.xy + poisson_disk[index]/1000.0,  (shadow_coord.z-bias)/shadow_coord.w) ));
	}

	// float visibility = texture( shadowMap, vec3(shadow_coord.xy, (shadow_coord.z-bias)/shadow_coord.w) );
	// if (visibility <= 0.0)
	// 	visibility = 0.5;
	
	//SpotLight
	// if ( texture( shadowMap, (shadow_coord.xy/shadow_coord.w) ).z  <  (shadow_coord.z-bias)/shadow_coord.w )
	// if ( textureProj( shadowMap, shadow_coord.xyw ).z  <  (shadow_coord.z-bias)/shadow_coord.w )
	
	color = 
		// Ambient : simulates indirect lighting
		material_ambient_color +
		// Diffuse : "color" of the object
		visibility * material_diffuse_color * light_color * light_power * cos_theta+
		// Specular : reflective highlight, like a mirror
		visibility * material_specular_color * light_color * light_power * pow(cos_alpha,material_specular_ratio);

}