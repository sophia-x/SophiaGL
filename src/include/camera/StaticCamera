#ifndef STATIC_CAMERA_H
#define STATIC_CAMERA_H

#include "Camera"

namespace gl
{

class StaticCamera: public Camera {
public:
	static shared_ptr<Camera> getCamera(vec3 p_pos, vec3 center = vec3(0, 0, 0), vec3 p_up = vec3(0, 1, 0), float p_fov = 45.0f,
	                                    float p_ratio = 4.0f / 3.0f, float p_near = 0.1f, float p_far = 100.f)
	{
		return shared_ptr<Camera>(new StaticCamera(p_pos, center, p_up, p_fov, p_ratio, p_near, p_far));
	}

	virtual void useCamera() {};

protected:
	StaticCamera(vec3 p_pos, vec3 center, vec3 p_up, float p_fov, float p_ratio, float p_near, float p_far):
		Camera(p_pos, Quat::lookAt(center - p_pos, p_up), 0, true, p_fov, p_ratio, p_near, p_far) {}

	virtual void control(float delta) {}
};

}

#endif