#ifndef CAMERA_H
#define CAMERA_H

#include <debug>

#include <scene/Spirit>

#include <tools/quaternion>

namespace gl
{

class Camera: public Spirit {
public:
	virtual ~Camera() {}

	const mat4& getViewMatrix() const {
		return view_matrix;
	};

	const mat4& getProjectionMatrix() const {
		return projection_matrix;
	};

	const vec3& getPosition() const {
		return position;
	}

	virtual void update(float delta) {
		if (delta > 0)
			control(delta);
	}

	virtual void useCamera() = 0;

protected:
	Camera(const vec3& p_pos, const quat& p_orig, float p_life, bool p_immortal, float p_fov, float p_ratio, float p_near, float p_far):
		Spirit{p_pos, p_orig, vec3(1), p_life, p_immortal}, fov(p_fov), ratio{p_ratio}, near{p_near}, far{p_far}
	{
		projection_matrix = perspective(radians(fov), ratio, near, far);
		view_matrix = lookAt(position, origentation * Quat::Z, origentation * Quat::Y);
	}

	virtual void control(float delta) = 0;

protected:
	mat4 view_matrix;
	mat4 projection_matrix;

	float fov;
	float ratio, near, far;
};

}
#endif