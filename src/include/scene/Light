#ifndef LIGHT_H
#define LIGHT_H

#include <vector>
using namespace std;

#include <gl_objs/GLHeader>

#include <debug>

#include "Spirit"

namespace gl
{

class Light: public Spirit {
public:
	Light(const vec3& p_color, float p_power, const vec3& p_pos, const quat& p_orig, const vec3& p_size, float p_life, bool p_immoral):
		color{p_color}, power{p_power}, Spirit{p_pos, p_orig, p_size, p_life, p_immoral} {}

	virtual ~Light() {}

	virtual const vec3& getColor() const {
		return color;
	}

	virtual void setUniforms(const shared_ptr<GLShader>& shader_ptr) const = 0;

protected:
	vec3 color;
	float power;
};

class DirectionLight: public Light {
public:
	DirectionLight(const vec3 &p_direction, const vec3 &p_color, float p_power, const vec3& p_low = vec3(-10),
	               const vec3& p_high = vec3(10, 10, 20), float p_life = 0, bool p_immoral = true):
		Light{p_color, p_power, vec3(), Quat::rotationBetweenVectors(Quat::Z, p_direction), vec3(1), p_life, p_immoral},
		low{p_low}, high{p_high}, len{length(p_direction)} {}

	virtual mat4 getMVP() const {
		mat4 depth_projection_matrix = ortho<float>(low.x, high.x, low.y, high.y, low.z, high.z);
		mat4 depth_view_matrix = lookAt(len * (origentation * Quat::Z), vec3(0), Quat::Y);

		return depth_projection_matrix * depth_view_matrix;
	}

	virtual void setUniforms(const shared_ptr<GLShader>& shader_ptr) const {
		vec3 dir = origentation * Quat::Z;

		glUniform3f(shader_ptr->getUniform("light_direction_worldspace"), dir.x, dir.y, dir.z);
		glUniform3f(shader_ptr->getUniform("light_color"), color.x, color.y, color.z);
		glUniform1f(shader_ptr->getUniform("light_power"), power);
	}

protected:
	vec3 low, high;
	float len;
};

class PointLight: public Light {
public:
	PointLight(const vec3 &p_position, const vec3 &p_color, float p_power, float p_life = 0, bool p_immoral = true):
		Light{p_color, p_power, p_position, quat(), vec3(1), p_life, p_immoral} {}

	virtual void setUniforms(const shared_ptr<GLShader>& shader_ptr) const {
		glUniform3f(shader_ptr->getUniform("light_position_worldspace"), position.x, position.y, position.z);
		glUniform3f(shader_ptr->getUniform("light_color"), color.x, color.y, color.z);
		glUniform1f(shader_ptr->getUniform("light_power"), power);
	}
};

}

#endif