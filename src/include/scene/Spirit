#ifndef SPIRIT_H
#define SPIRIT_H

#include <debug>

#include <memory>
#include <vector>
using namespace std;

#include <glm/glm.hpp>
#include <glm/gtc/quaternion.hpp>
#include <glm/gtx/transform.hpp>
using namespace glm;

namespace gl
{

class Spirit {
public:
	static shared_ptr<Spirit> getMortalSpirit(float p_life, const vec3& p_pos = vec3(), const quat& p_orig = quat(),
	        const vec3& p_size = vec3(1))
	{
		shared_ptr<Spirit> ptr(new Spirit(p_pos, p_orig, p_size, p_life, false));
		spirits.push_back(ptr);
		return ptr;
	}

	static shared_ptr<Spirit> getImmortalSpirit(const vec3& p_pos = vec3(), const quat& p_orig = quat(), const vec3& p_size = vec3(1)) {
		shared_ptr<Spirit> ptr(new Spirit(p_pos, p_orig, p_size, 0, true));
		spirits.push_back(ptr);
		return ptr;
	}

	virtual void update(float delta) {
		if (alive())
			life -= delta;
	}

	static void update_all(float delta) {
		for (shared_ptr<Spirit>& spirit : spirits)
			spirit->update(delta);
	}

	virtual mat4 getModelMatrix() const {
		mat4 rotation_matrix = mat4_cast(origentation);
		mat4 translation_matrix = translate(mat4(), position);
		mat4 scaling_matrix = scale(mat4(), size);
		mat4 model_matrix = translation_matrix * rotation_matrix * scaling_matrix;

		return model_matrix;
	}

	virtual const vec3& getPos() const {
		return position;
	}

	virtual const quat& getOrig() const {
		return origentation;
	}

	virtual const vec3& getSize() const {
		return size;
	}

	virtual const float& getLife() const {
		return life;
	}

	virtual bool alive() const {
		return immortal || life > 0;
	}

	virtual void setPos(const vec3& p_pos) {
		position = p_pos;
	}

	virtual void setOrig(const quat& p_orig) {
		origentation = p_orig;
	}

	virtual void setLife(float p_life) {
		life = p_life;
	}

protected:
	Spirit(const vec3& p_pos, const quat& p_orig, const vec3& p_size, float p_life, bool p_immortal):
		position{p_pos}, origentation{p_orig}, size{p_size}, life{p_life}, immortal{p_immortal} {}

protected:
	vec3 position;
	quat origentation;
	vec3 size;

	float life;
	bool immortal;

protected:
	static vector<shared_ptr<Spirit>> spirits;
};

class ParticleSpirit: public Spirit {
public:
	static shared_ptr<ParticleSpirit> getMortalSpirit(float p_life, const vec4& p_color = vec4(), const vec3& p_pos = vec3(),
	        const vec3& p_speed = vec3(), const vec3& p_acc = vec3(), const quat& p_orig = quat(), const vec3& p_size = vec3(1))
	{
		shared_ptr<ParticleSpirit> ptr(new ParticleSpirit(p_color, p_pos, p_orig, p_size, p_life, false, p_speed, p_acc));
		Spirit::spirits.push_back(ptr);
		return ptr;
	}

	virtual void update(float delta) {
		Spirit::update(delta);

		if (alive()) {
			speed += acc * delta;
			position += speed * delta;
		}
	}
	
	virtual const vec4& getColor() const {
		return color;
	}

protected:
	ParticleSpirit(const vec4& p_color, const vec3& p_pos, const quat& p_orig, const vec3& p_size, float p_life, bool p_immortal,
	               const vec3& p_speed, const vec3& p_acc): Spirit{p_pos, p_orig, p_size, p_life, p_immortal}, speed{p_speed},
		acc{p_acc}, color{p_color} {}

protected:
	vec3 speed, acc;
	vec4 color;
};

}
#endif