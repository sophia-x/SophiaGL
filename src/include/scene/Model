#ifndef MODEL_H
#define MODEL_H

#include <debug>

#include <gl_objs/GLObj>
#include <gl_objs/GLShader>

#include "Setter"
#include "Spirit"

namespace gl
{

class Model {
public:
	virtual ~Model() {}

	virtual void setSetter(const shared_ptr<Setter>& p_setter) {
		setter = p_setter;
	}

	virtual void setGLObj(const shared_ptr<GLObj>& p_obj) {
		gl_obj = p_obj;
	}

	virtual	void setData(const string& key, void* data, size_t size) {
		gl_obj->setData(key, data, size);
	}

	virtual void bufferData(const vector<string>& keys) const {
		gl_obj->bufferData(keys);
	}

	virtual const GLObj& getGLObj() const {
		return *gl_obj;
	}

	virtual const shared_ptr<GLObj>& getGLObjPtr() const {
		return gl_obj;
	}

	virtual const void* getData(const string& key, size_t& length) const {
		return gl_obj->getData(key, length);
	}

	virtual const shared_ptr<GLShader>& getShaderPtr() const {
		return shader_ptr;
	}

	virtual const shared_ptr<Spirit>& spirit_ptr() const {
		return spirit;
	}

	virtual void update(float delta) {
		setter->update(delta);
	}

	virtual void draw() const = 0;

protected:
	Model(const shared_ptr<GLObj>& p_obj, const shared_ptr<GLShader>& p_shader, const vector<string>& p_draw_vec, const string& p_draw_obj,
	      const shared_ptr<Setter>& p_setter_ptr): gl_obj{p_obj}, shader_ptr{p_shader}, draw_vec{p_draw_vec}, draw_obj{p_draw_obj},
		setter{p_setter_ptr} {}
	Model(const shared_ptr<GLObj>& p_obj, const shared_ptr<GLShader>& p_shader, const shared_ptr<Spirit>& p_spirit,
	      const vector<string>& p_draw_vec, const string& p_draw_obj, const shared_ptr<Setter>& p_setter_ptr): gl_obj{p_obj},
		shader_ptr{p_shader}, spirit{p_spirit}, draw_vec{p_draw_vec}, draw_obj{p_draw_obj}, setter{p_setter_ptr} {}
	Model(const shared_ptr<GLObj>& p_obj);

protected:
	shared_ptr<GLObj> gl_obj;
	shared_ptr<GLShader> shader_ptr;

	vector<string> draw_vec;
	string draw_obj;

	shared_ptr<Spirit> spirit;

	shared_ptr<Setter> setter;
};

}
#endif