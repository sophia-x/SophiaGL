#ifndef GL_OBJ_H
#define GL_OBJ_H

#include <debug>

#include <unordered_map>
#include <string>
using namespace std;

#include <tools/texture_loader>

#include "GLBuffer"
#include "GLDraw"

namespace gl
{

class GLObj final {
public:
	static shared_ptr<GLObj> getGLObj() {
		return shared_ptr<GLObj>(new GLObj());
	}

	~GLObj() {
		glDeleteVertexArrays(1, &vertex_array_ID);

		for (auto it = textures.begin(); it != textures.end(); it++) {
			glDeleteTextures(1, &(it->second));
		}
	}

	void addBuffer(const string& key, const shared_ptr<GLBuffer>& p_buffer) {
		p_buffer->bufferData();
		buffers[key] = p_buffer;
	}

	void addDrawObj(const string& key, const shared_ptr<GLDraw>& draw_obj) {
		draw_objs[key] = draw_obj;
	}

	void addTexture(const string& key, const string& path) {
		textures[key] = TextureLoader::loadTexture(path);
	}

	void addTexture(const string& key, GLuint texture) {
		textures[key] = texture;
	}

	const GLBuffer& getBuffer(const string& key) const {
		return *buffers.at(key);
	}

	void setData(const string& key, void* data, size_t size) {
		(*buffers.at(key)).setData(data, size);
	}

	void appendData(const string& key, void* data, size_t size) {
		(*buffers.at(key)).appendData(data, size);
	}

	void bufferData(const vector<string>& keys) const {
		for (const string& key : keys) {
			(*buffers.at(key)).bufferData();
		}
	}

	const void* getData(const string& key, size_t& length) const {
		return buffers.at(key)->getData(length);
	};

	const shared_ptr<GLDraw>& getDrawObj(const string& key) const {
		return draw_objs.at(key);
	}

	GLuint getTexture(const string& key) const {
		return textures.at(key);
	}

	void draw(const vector<string>& keys, const string& draw_key, GLuint first = 0, GLsizei dis2end = 0) {
		glBindVertexArray(vertex_array_ID);

		for (size_t i = 0; i < keys.size(); i++) {
			(*buffers.at(keys[i])).bind(i);
		}

		(*draw_objs.at(draw_key)).draw(first, dis2end);

		for (size_t i = 0; i < keys.size(); i++) {
			(*buffers.at(keys[i])).unbind(i);
		}

		glBindVertexArray(0);
	}

private:
	GLuint vertex_array_ID;
	unordered_map<string, shared_ptr<GLBuffer> > buffers;
	unordered_map<string, shared_ptr<GLDraw>> draw_objs;
	unordered_map<string, GLuint> textures;

private:
	GLObj() {
		glGenVertexArrays(1, &vertex_array_ID);
	}

	GLObj(const GLObj& obj);
	GLObj& operator=(const GLObj& obj);
};

}

#endif