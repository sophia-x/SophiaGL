#ifndef GL_DRAW_H
#define GL_DRAW_H

#include <debug>

#include "GLBuffer"

namespace gl {

class GLDraw {
public:
	virtual ~GLDraw() {}

	virtual void draw(GLuint first, GLsizei dis2end) const = 0;

protected:
	GLDraw(const GLBuffer& p_buffer, GLenum p_mode): buffer{p_buffer}, mode{p_mode} {}

protected:
	GLenum mode;
	const GLBuffer& buffer;
};

class GLArrayDraw: public GLDraw {
public:
	static shared_ptr<GLArrayDraw> getDrawObj(const GLBuffer& p_buffer, GLenum p_mode) {
		return shared_ptr<GLArrayDraw>(new GLArrayDraw(p_buffer, p_mode));
	}

	virtual ~GLArrayDraw() {}

	virtual void draw(GLuint first, GLsizei dis2end) const {
		glDrawArrays(mode, first, buffer.element_num() - dis2end);
	}

protected:
	GLArrayDraw(const GLBuffer& p_buffer, GLenum p_mode): GLDraw{p_buffer, p_mode} {}
};

class GLInstanceDraw: public GLDraw {
public:
	static shared_ptr<GLInstanceDraw> getDrawObj(const GLBuffer& p_buffer, GLenum p_mode, const size_t p_count = 0) {
		return shared_ptr<GLInstanceDraw>(new GLInstanceDraw(p_buffer, p_mode, p_count));
	}

	virtual ~GLInstanceDraw() {}

	virtual void setCount(size_t p_count) {
		prim_count = p_count;
	}

	virtual void draw(GLuint first, GLsizei dis2end) const {
		glDrawArraysInstanced(mode, first, buffer.element_num() - dis2end, prim_count);
	}

protected:
	GLInstanceDraw(const GLBuffer& p_buffer, GLenum p_mode, const size_t p_count): GLDraw{p_buffer, p_mode}, prim_count{p_count} {}

protected:
	size_t prim_count;
};

class GLElementDraw: public GLDraw {
public:
	static shared_ptr<GLElementDraw> getDrawObj(const GLBuffer& p_buffer, GLenum p_mode, GLenum p_type = GL_UNSIGNED_SHORT) {
		return shared_ptr<GLElementDraw>(new GLElementDraw(p_buffer, p_mode, p_type));
	}

	virtual ~GLElementDraw() {}

	virtual void draw(GLuint first, GLsizei dis2end) const {
		glDrawElements(mode, buffer.element_num() - dis2end, type, (const GLvoid*) first);
	}

protected:
	GLElementDraw(const GLBuffer& p_buffer, GLenum p_mode, GLenum p_type): GLDraw{p_buffer, p_mode}, type{p_type} {}

protected:
	GLenum type;
};

}

#endif